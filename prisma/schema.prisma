// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
}

enum Tier {
  ADVOCATE
  AMBASSADOR
}

enum AffSource {
  DISCOUNT
  CART_ATTR
  COOKIE
  NONE
}

enum LedgerStatus {
  PENDING
  APPROVED
  PAID
  CLAWED_BACK
}

enum LeadAffSource {
  DISCOUNT
  LINK
  FORM
  CART_ATTR
  MANUAL
  NONE
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  role          Role     @default(MEMBER)
  tier          Tier     @default(ADVOCATE)
  refCode       String   @unique
  discountCode  String?  @unique
  createdAt     DateTime @default(now())
  Clicks        Click[]
  Orders        Order[]
  Ledger        CommissionLedger[]
  Leads         Lead[]
}

model Click {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  url       String
  ipHash    String
  userAgent String
  createdAt DateTime @default(now())
  @@index([ipHash, createdAt])
}

model Order {
  id             String   @id @default(cuid())
  shopifyOrderId String   @unique
  userId         String?
  user           User?    @relation(fields: [userId], references: [id])
  customerEmail  String?
  currency       String
  subtotalNet    Decimal  @db.Decimal(18,2)
  affSource      AffSource
  paidAt         DateTime
  refundedAmount Decimal  @default(0) @db.Decimal(18,2)
  createdAt      DateTime @default(now())
  Ledger         CommissionLedger[]
}

model CommissionRule {
  id        String   @id @default(cuid())
  scope     String
  rateType  String
  rateValue Decimal  @db.Decimal(6,3)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
}

model CommissionLedger {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Decimal  @db.Decimal(18,2)
  currency  String
  status    LedgerStatus @default(PENDING)
  reason    String
  createdAt DateTime @default(now())
  batchId   String?
  batch     PayoutBatch? @relation(fields: [batchId], references: [id])
}

model PayoutBatch {
  id          String   @id @default(cuid())
  periodStart DateTime
  periodEnd   DateTime
  total       Decimal  @db.Decimal(18,2)
  currency    String
  status      String
  createdAt   DateTime @default(now())
  Ledger      CommissionLedger[]
}

model Lead {
  id              String        @id @default(cuid())
  email           String        @unique
  name            String?
  source          String
  referrerUserId  String?
  referrer        User?         @relation(fields: [referrerUserId], references: [id])
  refCode         String?
  affSource       LeadAffSource @default(NONE)
  clickId         String?
  utm_source      String?
  utm_medium      String?
  utm_campaign    String?
  utm_term        String?
  utm_content     String?
  ipHash          String?
  userAgent       String?
  firstTouchAt    DateTime      @default(now())
  lastTouchAt     DateTime      @updatedAt
  createdAt       DateTime      @default(now())
  @@index([createdAt])
  @@index([referrerUserId])
}

model Article {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  bodyMd    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}